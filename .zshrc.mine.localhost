# for mba
alias rm='rmtrash'

#=============================
## source z.sh
##=============================

if [ -f ~/.zsh/z.sh ]; then
  _Z_CMD=j
  source ~/.zsh/z.sh
  precmd() {
    _z --add "$(pwd -P)"
  }
fi

#=============================
## source auto-fu.zsh
##=============================

#if [ -f ~/.zsh/auto-fu.zsh ]; then
#  source ~/.zsh/auto-fu.zsh
#  function zle-line-init () {
#    auto-fu-init
#  }
#  zle -N zle-line-init
#  zstyle ':completion:*' completer _oldlist _complete
#  zstyle ':auto-fu:var' autoable-function/skiplines \
#    '(scp|svn|java|mount_smbfs|mount_afp|gradle|npm) *'
#fi

# rbenv
if [[ -d ~/.rbenv ]]; then
  eval "$(rbenv init -)"
fi

## rbenv binstubs setting
export PATH=./vendor/bin:$PATH
alias be='bundle exec'

# phpenv
if [[ -d ~/.phpenv ]]; then
  export PATH=$PATH:$HOME/.phpenv/bin
  eval "$(phpenv init -)"
fi

# node
export PATH=$PATH:$HOME/.ndenv/bin
eval "$(ndenv init -)"

# java default version
export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)

# golang
GO_VERSION=1.3
export GOPATH=${HOME}/.go/${GO_VERSION}
export PATH=$PATH:${GOPATH}/bin

# google cloud sdk
# The next line updates PATH for the Google Cloud SDK.
#source ${HOME}'/var/lib/google-cloud-sdk/path.zsh.inc'

# The next line enables zsh completion for gcloud.
#source ${HOME}'/var/lib/google-cloud-sdk/completion.zsh.inc'

# gradle
export GRADLE_HOME=/usr/local/Cellar/gradle/2.0
export PATH=$PATH:${GRADLE_HOME}/bin

# tmuxinater
source ~/.tmuxinator/tmuxinator.zsh

# docker
# eval "$(docker-machine env default)"

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

# direnv
eval "$(direnv hook zsh)"

# pyenv
export PYENV_ROOT="${HOME}/.pyenv"
export PATH=${PYENV_ROOT}/bin:$PATH
eval "$(pyenv init -)"

# macvim
case ${OSTYPE} in
darwin*) # Mac OS X
  function mvim () {
    if [ -d /Applications/MacVim.app ]
    then
      [ ! -f $1 ] && touch $1
      open -a MacVim $1
    else
      vim $1
    fi
  }
  #alias vim='macvim'
  ;;
esac

# peco
# http://k0kubun.hatenablog.com/entry/2014/07/06/033336
function peco-history-selection() {
    BUFFER=`history -n 1 | tail -r  | awk '!a[$0]++' | peco`
    CURSOR=$#BUFFER
    zle reset-prompt
}
zle -N peco-history-selection
bindkey '^R' peco-history-selection

function peco-src() {
    local selected_dir=$(ghq list | peco --query "$LBUFFER")
    if [ -n "$selected_dir" ]; then
        BUFFER="cd $(ghq root)/${selected_dir}"
        zle accept-line
    fi
    zle redisplay
}
zle -N peco-src
stty -ixon
bindkey '^s' peco-src

function peco-find-file() {
    if git rev-parse 2> /dev/null; then
        source_files=$(git ls-files)
    else
        source_files=$(find . -type f)
    fi
    selected_files=$(echo $source_files | peco --prompt "[find file]")

    BUFFER="${BUFFER}$(echo $selected_files | tr '\n' ' ')"
    CURSOR=$#BUFFER
    zle redisplay
}
zle -N peco-find-file
bindkey '^q' peco-find-file

alias -g B='`git branch | peco | sed -e "s/^\*[ ]*//g"`'
alias -g P='| peco'

# ghq
# alias gg='cd $(ghq root)/$(ghq list | peco)'
alias ggo='hub browse $(ghq list | peco | cut -d "/" -f 2,3)'
